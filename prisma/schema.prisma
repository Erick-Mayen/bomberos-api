generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model estado_unidad {
  id_estado Int      @id @default(autoincrement())
  nombre    String   @unique @db.VarChar(50)
  unidad    unidad[]
}

model mantenimiento_unidad {
  id_mantenimiento      Int      @id @default(autoincrement())
  id_unidad             Int
  fecha_mantenimiento   DateTime @db.Date
  descripcion           String?
  taller                String?  @db.VarChar(255)
  kilometraje           Int?
  costo                 Decimal? @db.Decimal(10, 2)
  proximo_mantenimiento Int?
  activo                Boolean  @default(true)
  usuario_creacion      Int?
  fecha_creacion        DateTime @default(now()) @db.Timestamp(6)
  fecha_actualizacion   DateTime @default(now()) @db.Timestamp(6)
  unidad                unidad   @relation(fields: [id_unidad], references: [id_unidad], onDelete: NoAction, onUpdate: NoAction)
  usuario               usuario? @relation(fields: [usuario_creacion], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model personal {
  id_personal         Int           @id @default(autoincrement())
  primer_nombre       String        @db.VarChar(50)
  segundo_nombre      String?       @db.VarChar(50)
  primer_apellido     String        @db.VarChar(50)
  segundo_apellido    String?       @db.VarChar(50)
  id_tipo_personal    Int
  activo              Boolean       @default(true)
  fecha_creacion      DateTime      @default(now()) @db.Timestamp(6)
  fecha_actualizacion DateTime      @default(now()) @db.Timestamp(6)
  usuario_creacion    Int           @default(1)
  usuario_creador     usuario       @relation("personalCreadoPorUsuario", fields: [usuario_creacion], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_creacion_personal")
  tipo_personal       tipo_personal @relation(fields: [id_tipo_personal], references: [id_tipo_personal], onDelete: NoAction, onUpdate: NoAction)
  usuariosAsignados   usuario[]     @relation("usuarioAsignado")
}

model rol {
  id_rol     Int       @id @default(autoincrement())
  nombre_rol String    @db.VarChar(50)
  usuario    usuario[]
}

model tipo_personal {
  id_tipo_personal Int        @id @default(autoincrement())
  nombre           String     @db.VarChar(50)
  personal         personal[]
}

model tipo_vehiculo {
  id_tipo_vehiculo Int      @id @default(autoincrement())
  nombre           String   @unique @db.VarChar(50)
  unidad           unidad[]
}

model unidad {
  id_unidad            Int                    @id @default(autoincrement())
  unidad               String                 @unique @db.VarChar(20)
  modelo               String                 @db.VarChar(10)
  id_tipo_vehiculo     Int
  id_estado_unidad     Int
  descripcion          String?
  kilometraje          Int?
  activo               Boolean                @default(true)
  fecha_creacion       DateTime               @default(now()) @db.Timestamp(6)
  fecha_actualizacion  DateTime               @default(now()) @db.Timestamp(6)
  usuario_creacion     Int?
  mantenimiento_unidad mantenimiento_unidad[]
  estado_unidad        estado_unidad          @relation(fields: [id_estado_unidad], references: [id_estado], onDelete: NoAction, onUpdate: NoAction)
  tipo_vehiculo        tipo_vehiculo          @relation(fields: [id_tipo_vehiculo], references: [id_tipo_vehiculo], onDelete: NoAction, onUpdate: NoAction)
  usuario              usuario?               @relation(fields: [usuario_creacion], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model usuario {
  id_usuario           Int                    @id @default(autoincrement())
  nombre_usuario       String                 @unique @db.VarChar(15)
  contrasenia          String                 @db.VarChar(255)
  id_personal          Int?
  id_rol               Int
  activo               Boolean                @default(true)
  validar              Boolean                @default(true)
  fecha_creacion       DateTime               @default(now()) @db.Timestamptz(6)
  fecha_actualizacion  DateTime               @default(now()) @db.Timestamptz(6)
  usuario_creacion     Int?
  mantenimiento_unidad mantenimiento_unidad[]
  personalCreado       personal[]             @relation("personalCreadoPorUsuario")
  turno                turno[]
  unidad               unidad[]
  usuario              usuario?               @relation("usuarioTousuario", fields: [usuario_creacion], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_creacion")
  other_usuario        usuario[]              @relation("usuarioTousuario")
  personalAsignado     personal?              @relation("usuarioAsignado", fields: [id_personal], references: [id_personal], onDelete: NoAction, onUpdate: NoAction, map: "usuario_ibfk_1")
  rol                  rol                    @relation(fields: [id_rol], references: [id_rol], onDelete: NoAction, onUpdate: NoAction)
}

model turno {
  id_turno            Int       @id @default(autoincrement())
  nombre_turno        String    @db.VarChar(100)
  tipo_turno          String    @db.VarChar(10)
  hora_inicio         String    @db.VarChar(15)
  dias_semana         Int[]
  fecha_inicio_ciclo  DateTime  @db.Date
  fecha_fin_ciclo     DateTime? @db.Date
  personal_asignado   Int[]
  activo              Boolean   @default(true)
  observaciones       String?
  es_rotativo         Boolean   @default(false)
  orden_rotacion      Int?      @default(0)
  semanas_rotacion    Int?      @default(1)
  usuario_creacion    Int?
  fecha_creacion      DateTime  @default(now()) @db.Timestamptz(6)
  fecha_actualizacion DateTime  @default(now()) @db.Timestamptz(6)
  usuario             usuario?  @relation(fields: [usuario_creacion], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}
